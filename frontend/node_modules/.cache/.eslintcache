[{"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\index.js":"1","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\app.js":"2","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\NavBar.js":"3","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Home.js":"4","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Footer.js":"5","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Search.js":"6","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Banner.js":"7","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\App.js":"8","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\cardlist\\RecipesCard.js":"9","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\cardlist\\Card.js":"10","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Single.js":"11","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Container.js":"12","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Edit.js":"13","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Add.js":"14","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\NotFound.js":"15","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\comments\\Review.js":"16","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\comments\\Comment.js":"17","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\GlobalStyle.js":"18","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\app\\store.js":"19","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\EndBanner\\EndBanner.js":"20","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\EndBanner\\ViewReq.js":"21"},{"size":337,"mtime":1697304056354,"results":"22","hashOfConfig":"23"},{"size":417,"mtime":1696700949170,"results":"24","hashOfConfig":"23"},{"size":1668,"mtime":1697288831359,"results":"25","hashOfConfig":"23"},{"size":12793,"mtime":1697446019158,"results":"26","hashOfConfig":"23"},{"size":1109,"mtime":1697043115909,"results":"27","hashOfConfig":"23"},{"size":2969,"mtime":1697303006200,"results":"28","hashOfConfig":"23"},{"size":4695,"mtime":1697275042047,"results":"29","hashOfConfig":"23"},{"size":906,"mtime":1696952398873,"results":"30","hashOfConfig":"23"},{"size":950,"mtime":1697301104394,"results":"31","hashOfConfig":"23"},{"size":1702,"mtime":1697258868632,"results":"32","hashOfConfig":"23"},{"size":8278,"mtime":1697303761908,"results":"33","hashOfConfig":"23"},{"size":241,"mtime":1697204389999,"results":"34","hashOfConfig":"23"},{"size":19508,"mtime":1697268542834,"results":"35","hashOfConfig":"23"},{"size":18462,"mtime":1697268467552,"results":"36","hashOfConfig":"23"},{"size":674,"mtime":1696952476749,"results":"37","hashOfConfig":"23"},{"size":7568,"mtime":1697120677894,"results":"38","hashOfConfig":"23"},{"size":2996,"mtime":1697120534362,"results":"39","hashOfConfig":"23"},{"size":815,"mtime":1696952381950,"results":"40","hashOfConfig":"23"},{"size":408,"mtime":1697210851236,"results":"41","hashOfConfig":"23"},{"size":6674,"mtime":1697447577248,"results":"42","hashOfConfig":"23"},{"size":5242,"mtime":1697447563415,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1jh7ajb",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\index.js",[],[],["113"],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\app.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\NavBar.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Home.js",["114","115","116","117","118","119","120","121","122"],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Footer.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Search.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Banner.js",["123"],[],"\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Banner({ className }) {\r\n\r\n  const [slideIndex, setSlideIndex] = useState(1);\r\n  const [slideImages, setSlideImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load all slide images from a directory (e.g., 'slideshow') dynamically\r\n    const context = require.context(\r\n      '/public/images/slideshow',\r\n      false,\r\n      /\\.(png|jpe?g|svg)$/\r\n    );\r\n    const images = context.keys().map(context);\r\n    setSlideImages(images);\r\n  }, []);\r\n\r\n  function plusSlides(n) {\r\n    let newIndex = slideIndex + n;\r\n    if (newIndex > slideImages.length) {\r\n      newIndex = 1;\r\n    } else if (newIndex < 1) {\r\n      newIndex = slideImages.length;\r\n    }\r\n    setSlideIndex(newIndex);\r\n  }\r\n\r\n  // Automatically advance to the next slide every 3 seconds\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      plusSlides(1);\r\n    }, 3000); // Change the duration here (in milliseconds) for the desired interval\r\n    return () => clearInterval(intervalId);\r\n  }, [slideIndex, plusSlides]); // Include plusSlides as a dependency\r\n\r\n\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"banner\">\r\n        <div className=\"trailer\">\r\n          <h1>Welcome to RecipeBox!</h1>\r\n          <h2>\r\n            \"your culinary paradise where you'll discover\r\n            a world of delectable dishes, step-by-step cooking guides, and a community of food lovers\"\r\n          </h2>\r\n          <a href=\"#scoll\">Explore</a>\r\n        </div>\r\n        <div className=\"slideshow\">\r\n          {/* <img src=\"../images/recipe/steak.jpg\" alt=\"img\" /> */}\r\n          <SlideshowContainer>\r\n\r\n        {slideImages.map((imageSrc, index) => (\r\n          <MySlides\r\n            key={index}\r\n            style={slideIndex === index + 1 ? { display: 'block' } : {}}\r\n          >\r\n            <Img src={imageSrc} alt={`Slide ${index + 1}`} />\r\n          </MySlides>\r\n        ))}\r\n        <Prev onClick={() => plusSlides(-1)}>❮</Prev>\r\n        <Next onClick={() => plusSlides(1)}>❯</Next>\r\n      </SlideshowContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nBanner.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default styled(Banner)`\r\n  .banner {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 50px;\r\n    padding-top: 50px;\r\n    padding-bottom: 50px;\r\n    height: 550px;\r\n    border-bottom: 1px solid #e23c34;\r\n    border-top: 1px solid #e23c34;\r\n  }\r\n  .trailer {\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 50px;\r\n    color: #e23c34;\r\n  }\r\n  .trailer a {\r\n    background-color: #e23c34;\r\n    border: 1px solid #e23c34;\r\n    text-decoration: none;\r\n    padding: 10px;\r\n    border-radius: 30px;\r\n    width: 150px;\r\n    color: #fff;\r\n    transition: 0.3s ease, color 0.3s ease;\r\n    cursor: pointer;\r\n    font-size: medium;\r\n  }\r\n  .trailer a:hover {\r\n    background-color: #fdee82;\r\n    border: 1px solid #e23c34;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .trailer h2 {\r\n    font-weight: normal;\r\n    padding: 10px;\r\n  }\r\n\r\n  .slideshow {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .slideshow img {\r\n    min-width: 100%;\r\n    min-height: 100%;\r\n    width: 1500px;\r\n    height: 500px;\r\n    object-fit: contain;\r\n  }\r\n`;\r\n\r\nconst SlideshowContainer = styled.div`\r\n\r\n  margin: auto;\r\n`;\r\n\r\nconst FadeAnimation = keyframes`\r\n  from {\r\n    opacity: 0.4;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst MySlides = styled.div`\r\n  display: none;\r\n  animation-name: ${FadeAnimation};\r\n  animation-duration: 1.5s;\r\n  width: 100%;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  vertical-align: middle;\r\n  width: 100%;\r\n  height: 625px;\r\n  object-fit: cover;\r\n  transition: all ease 1.5s;\r\n`;\r\n\r\n\r\nconst Prev = styled.a`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 50%;\r\n  width: auto;\r\n  padding: 16px;\r\n  margin-top: -22px;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  transition: 0.6s ease;\r\n  border-radius: 0 3px 3px 0;\r\n  user-select: none;\r\n  left: 0;\r\n  border-radius: 3px 0 0 3px;\r\n\r\n  &:hover {\r\n    background-color: #e23c34;\r\n  }\r\n`;\r\n\r\nconst Next = styled.a`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 50%;\r\n  width: auto;\r\n  padding: 16px;\r\n  margin-top: -22px;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  transition: 0.6s ease;\r\n  border-radius: 0 3px 3px 0;\r\n  user-select: none;\r\n  right: 0;\r\n  border-radius: 3px 0 0 3px;\r\n\r\n  &:hover {\r\n    background-color: #e23c34;\r\n  }\r\n`;\r\n","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\App.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\cardlist\\RecipesCard.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\cardlist\\Card.js",["124","125"],[],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Card({ recipeData, className }) {\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"card\">\r\n        <div className=\"recipe_img\">\r\n          <img src={recipeData.image[0]} alt=\"img\" />\r\n        </div>\r\n        <p>{recipeData.title}</p>\r\n        <Link to={`/recipes/${recipeData.id}`}>\r\n          <button type=\"submit\">Check Out</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  recipeData: PropTypes.object.isRequired,\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default styled(Card)`\r\n  .card {\r\n    background-color: rgb(255, 255, 255);\r\n    width: 200px;\r\n    height: 300px;\r\n    margin: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .card .recipe_img {\r\n    width: 180px;\r\n    height: 180px;\r\n    display: flex;\r\n    overflow: hidden;\r\n    justify-content: center;\r\n  }\r\n\r\n  .card .recipe_img img {\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    width: auto;\r\n    height: auto;\r\n    object-fit: cover;\r\n  }\r\n  .card p {\r\n    padding-top: 20px;\r\n  }\r\n\r\n  .card button {\r\n    background-color: #e23c34;\r\n    border: 1px solid #e23c34;\r\n    padding: 5px;\r\n    margin: 10px;\r\n    border-radius: 30px;\r\n    width: 120px;\r\n    color: #fff;\r\n    transition: 0.3s ease, color 0.3s ease;\r\n    cursor: pointer;\r\n    font-size: medium;\r\n  }\r\n  .card button:hover {\r\n    background-color: #fdee82;\r\n    border: 1px solid #e23c34;\r\n    color: #e23c34;\r\n  }\r\n`;\r\n","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Single.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Container.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Edit.js",["126"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Edit({ className }) {\r\n  const { id } = useParams();\r\n\r\n  const [ingredients, setIngredients] = useState([\"\", \"\", \"\"]);\r\n  const [steps, setSteps] = useState([\"\", \"\", \"\"]);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    title: \"\",\r\n    image: \"\",\r\n    video: \"\",\r\n    ingredients: [],\r\n    steps: [],\r\n    prepTime: \"\",\r\n    cookTime: \"\",\r\n    level: \"easy\",\r\n    serving: \"\",\r\n    type: \"breakfast\",\r\n    options: \"\",\r\n    author: \"\",\r\n  });\r\n\r\n  // Function to add a new ingredient field\r\n  const handleAddIngredient = () => {\r\n    setIngredients([...ingredients, \"\"]);\r\n  };\r\n\r\n  // Function to remove a ingredient\r\n  const handleRemoveIngredient = () => {\r\n    const newIngredients = [...ingredients];\r\n    newIngredients.splice(newIngredients.length - 1, 1);\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  // Function to add a new step\r\n  const handleAddStep = () => {\r\n    setSteps([...steps, \"\"]);\r\n  };\r\n\r\n  // Function to remove a step\r\n  const handleRemoveStep = () => {\r\n    const newSteps = [...steps];\r\n    newSteps.splice(newSteps.length - 1, 1);\r\n    setSteps(newSteps);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://localhost:8000/recipes/${id}`)\r\n      .then((response) => {\r\n        const apiData = response.data;\r\n\r\n        // Update the formData state with data from the API\r\n        setFormData({\r\n          title: apiData.title,\r\n          image: apiData.image,\r\n          video: apiData.video,\r\n          ingredients: apiData.ingredients,\r\n          steps: apiData.steps,\r\n          prepTime: apiData.prepTime,\r\n          cookTime: apiData.cookTime,\r\n          level: apiData.level,\r\n          serving: apiData.serving,\r\n          type: apiData.type,\r\n          options: apiData.options,\r\n          author: apiData.author,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching recipe:\", error);\r\n      });\r\n  }, [id]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"image1\" || name === \"image2\") {\r\n      // Handle image inputs\r\n      const imageIndex = name === \"image1\" ? 0 : 1;\r\n      const newImages = [...formData.image];\r\n      newImages[imageIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        image: newImages,\r\n      });\r\n    } else if (name === \"author\" || name === \"serving\" || name === \"options\") {\r\n      // Handle author, serving, and options inputs\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    } else if (name.startsWith(\"ingredient\")) {\r\n      // Handle ingredients inputs\r\n      const ingredientIndex = parseInt(name.match(/\\d+/)[0]);\r\n      const newIngredients = [...formData.ingredients];\r\n      newIngredients[ingredientIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        ingredients: newIngredients,\r\n      });\r\n    } else if (name.startsWith(\"step\")) {\r\n      // Handle steps inputs\r\n      const stepIndex = parseInt(name.match(/\\d+/)[0]);\r\n      const newSteps = [...formData.steps];\r\n      newSteps[stepIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        steps: newSteps,\r\n      });\r\n    } else {\r\n      // Handle other inputs\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate required fields\r\n    const requiredFields = [\r\n      \"title\",\r\n      \"prepTime\",\r\n      \"cookTime\",\r\n      \"level\",\r\n      \"serving\",\r\n      \"type\",\r\n      \"options\",\r\n      \"author\",\r\n    ];\r\n\r\n    const emptyFields = requiredFields.filter((field) => {\r\n      const value = formData[field];\r\n      return typeof value === \"string\" && value.trim() === \"\";\r\n    });\r\n\r\n    if (emptyFields.length > 0) {\r\n      alert(`Please fill in all required fields: ${emptyFields.join(\", \")}`);\r\n      return;\r\n    }\r\n    // Validate Prep Time, Cook Time, and Servings\r\n    const prepTimeValue = parseFloat(formData.prepTime);\r\n    const cookTimeValue = parseFloat(formData.cookTime);\r\n    const servingValue = parseFloat(formData.serving);\r\n\r\n    if (isNaN(prepTimeValue) || isNaN(cookTimeValue) || isNaN(servingValue)) {\r\n      alert(\"Prep Time, Cook Time, and Servings must be numbers.\");\r\n      return; // Do not proceed with the submission\r\n    }\r\n\r\n    try {\r\n      const response = await Axios.put(\r\n        `http://localhost:8000/recipes/${id}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"Recipe updated successfully:\", response.data);\r\n        setIsSuccess(true);\r\n        window.alert(\"Recipe Edited successfully!\");\r\n        window.location.href = `/recipes/${id}`;\r\n      } else {\r\n        console.error(\r\n          `Update failed: ${response.status} - ${response.statusText}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating recipe:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"container\">\r\n          <div className=\"top_name\">\r\n            <h1>Edit a Recipe</h1>\r\n            <p>\r\n              Editing a recipe allows you to personalize flavors and create\r\n              culinary masterpieces uniquely tailored to your taste, unlocking a\r\n              world of culinary creativity and satisfaction.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"section_1\">\r\n            <div>\r\n              <div className=\"title\">\r\n                <h2>Recipe Title</h2>\r\n                <div className=\"typetitle\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Give your recipe a title\"\r\n                    value={formData.title}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"photo\">\r\n                <h2>Photo (optional)</h2>\r\n                <div className=\"typephoto1\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"image1\"\r\n                    placeholder=\"Add image url\"\r\n                    value={formData.image[0]}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"typephoto\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"image2\"\r\n                    placeholder=\"Add image url\"\r\n                    value={formData.image[1]}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"video\">\r\n                <h2>Video (optional)</h2>\r\n                <div className=\"typevideo\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"video\"\r\n                    placeholder=\"Add video url\"\r\n                    value={formData.video}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section_2\">\r\n            <h2>Ingredients</h2>\r\n            <p>\r\n              Enter one ingredient per line. Include the quantity and any\r\n              special preparation. Use optional headers to organize the\r\n              different parts of the recipe.\r\n            </p>\r\n            <h3>Enter ingredients below</h3>\r\n            {ingredients.map((ingredient, index) => (\r\n              <div key={index} className=\"typeingre\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"e.g. 2 cups flour\"\r\n                  value={formData.ingredients[index]}\r\n                  onChange={(e) => {\r\n                    const newIngredients = [...formData.ingredients];\r\n                    newIngredients[index] = e.target.value;\r\n                    setFormData({\r\n                      ...formData,\r\n                      ingredients: newIngredients,\r\n                    });\r\n                  }}\r\n                />\r\n                <i\r\n                  onClick={handleRemoveIngredient}\r\n                  className=\"fa-solid fa-circle-minus\"\r\n                ></i>\r\n              </div>\r\n            ))}\r\n\r\n            <button type=\"button\" onClick={handleAddIngredient}>\r\n              +Add Ingredient\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"section_3\">\r\n            <h2>Directions</h2>\r\n            <p>\r\n              Explain how to make your recipe, including oven temperatures,\r\n              baking or cooking times, and pan sizes. Organize the different\r\n              parts of the recipe\r\n            </p>\r\n            <h3>Enter directions below</h3>\r\n            {steps.map((step, index) => (\r\n              <div key={index} className=\"typedirec\">\r\n                <p>Step {index + 1}</p>\r\n                <textarea\r\n                  value={formData.steps[index]}\r\n                  onChange={(e) => {\r\n                    const newSteps = [...formData.steps];\r\n                    newSteps[index] = e.target.value;\r\n                    setFormData({\r\n                      ...formData,\r\n                      steps: newSteps,\r\n                    });\r\n                  }}\r\n                  placeholder=\"e.g. Reheat oven at 30 degrees F...\"\r\n                ></textarea>\r\n                <i\r\n                  onClick={handleRemoveStep}\r\n                  className=\"fa-solid fa-circle-minus\"\r\n                ></i>\r\n              </div>\r\n            ))}\r\n            <button type=\"button\" onClick={handleAddStep}>\r\n              +Add Step\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"section_4\">\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <h2>Prep Time</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"prepTime\"\r\n                  placeholder=\"0\"\r\n                  value={formData.prepTime}\r\n                  onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"preptime\">min</label>\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <h2>Cook Time</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"cookTime\"\r\n                  placeholder=\"0\"\r\n                  value={formData.cookTime}\r\n                  onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"cooktime\">min</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"level\">\r\n                  <h2>Level</h2>\r\n                </label>\r\n                <select id=\"level\" name=\"level\">\r\n                  <option value=\"easy\">Easy</option>\r\n                  <option value=\"Medium\">Medium</option>\r\n                  <option value=\"hard\">Hard</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"recipe-type\">\r\n                  <h2>Type</h2>\r\n                </label>\r\n\r\n                <select\r\n                  id=\"recipe-type\"\r\n                  name=\"type\"\r\n                  value={formData.type}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"breakfast\">Breakfast</option>\r\n                  <option value=\"lunch\">Lunch</option>\r\n                  <option value=\"dinner\">Dinner</option>\r\n                  <option value=\"appetizer\">Appetizer</option>\r\n                  <option value=\"salad\">Salad</option>\r\n                  <option value=\"main-course\">Main Course</option>\r\n                  <option value=\"baked-goods\">Baked Goods</option>\r\n                  <option value=\"dessert\">Dessert</option>\r\n                  <option value=\"soup\">Soup</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <h2>Servings</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"serving\"\r\n                  placeholder=\"0\"\r\n                  value={formData.serving}\r\n                  onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"recipe-options\">\r\n                  <h2>Options</h2>\r\n                </label>\r\n                <select\r\n                  id=\"recipe-options\"\r\n                  name=\"options\"\r\n                  value={formData.options}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"non-spicy\">Non-Spicy</option>\r\n                  <option value=\"spicy\">Spicy</option>\r\n                  <option value=\"vegetarian\">Vegetarian</option>\r\n                  <option value=\"vegan\">Vegan</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section_5\">\r\n            <h2>Author Name</h2>\r\n            <input\r\n              type=\"text\"\r\n              name=\"author\"\r\n              placeholder=\"Your name\"\r\n              value={formData.author}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"section_6\">\r\n            <Link to={`/recipes/${id}`}>\r\n              <button className=\"cancel-button\" type=\"button\">\r\n                Cancel {/* Use type=\"reset\" to reset the form */}\r\n              </button>\r\n            </Link>\r\n            <button className=\"save-button\" type=\"submit\">\r\n              Save Recipe\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      {/* {isSuccess && (\r\n        <div className=\"success-message\">Recipe Edited successfully!</div>\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nEdit.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default styled(Edit)`\r\n  .container {\r\n    margin: 0 10%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  .container .top_name {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n    margin: 130px 130px 0 130px;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_1 {\r\n    margin-top: 20px;\r\n    padding: 20px 0;\r\n    border-top: #e23c34 1px solid;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_1 input {\r\n    width: 500px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border: 0;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_1 input::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_1 textarea {\r\n    width: 500px;\r\n    height: 80px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    resize: none;\r\n    background-color: #fff;\r\n  }\r\n  .section_3 textarea::placeholder {\r\n    color: #ababab;\r\n    font-family: \"Inter\", sans-serif;\r\n  }\r\n\r\n  .container .section_1 h2 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .container .section_1 textarea::placeholder {\r\n    color: transparent;\r\n  }\r\n\r\n  .container .section_2,\r\n  .container .section_3,\r\n  .container .section_4,\r\n  .container .section_5 {\r\n    margin-top: 20px;\r\n    padding: 20px 0;\r\n    border-top: #e23c34 1px solid;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_2 input,\r\n  .container .section_5 input {\r\n    width: 500px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    margin-right: 10px;\r\n    border: 0;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_2 input::placeholder,\r\n  .container .section_5 input::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_2 .typeingre,\r\n  .typedirec {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .container .section_2 .typeingre i,\r\n  .typedirec i {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_2 .typeingre i:hover,\r\n  .typedirec i:hover {\r\n    cursor: pointer;\r\n    color: #6b6b6b;\r\n    transition: all ease 0.5s;\r\n  }\r\n\r\n  .container .section_2 button,\r\n  .container .section_3 button {\r\n    background-color: #e23c34;\r\n    color: #fff;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    width: 15%;\r\n  }\r\n\r\n  .container .section_2 button:hover,\r\n  .container .section_3 button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_2 h2,\r\n  h3 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .container .section_3 textarea {\r\n    width: 500px;\r\n    height: 80px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    resize: none;\r\n    background-color: #fff;\r\n    font-family: \"Inter\", sans-serif;\r\n  }\r\n\r\n  .container .section_3 textarea::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_4 {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .container .section_4 .selectBox {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .container .section_4 .selectBox input {\r\n    width: 50px;\r\n    height: 30px;\r\n    margin: 10px;\r\n    border: 0;\r\n    text-align: center;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_4 .selectBox input::placeholder {\r\n    color: #ababab;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_4 .selectBox select {\r\n    width: 150px;\r\n    height: 30px;\r\n    margin: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    border: #fff 2px solid;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_4 .selectBox select:hover {\r\n    background-color: #fff;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    transition: 0.3s;\r\n  }\r\n\r\n  .container .section_4 .selectBox select option {\r\n    background-color: #ffffff;\r\n    color: #333;\r\n    padding: 5px;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_4 label {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .container .section_5 h2 {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .section_6 .cancel-button {\r\n    background-color: #fff;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    cursor: pointer;\r\n    width: 150px;\r\n  }\r\n\r\n  .section_6 .cancel-button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n  }\r\n\r\n  .section_6 .save-button {\r\n    background-color: #e23c34;\r\n    color: #fff;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    width: 150px;\r\n  }\r\n\r\n  .section_6 .save-button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n  }\r\n\r\n  .section_6 {\r\n    text-align: right;\r\n  }\r\n`;\r\n","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\Add.js",["127","128"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Add({ className }) {\r\n  const [ingredients, setIngredients] = useState([\"\", \"\", \"\"]);\r\n  const [steps, setSteps] = useState([\"\", \"\", \"\"]);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  // Function to add a new ingredient field\r\n  const handleAddIngredient = () => {\r\n    setIngredients([...ingredients, \"\"]);\r\n  };\r\n\r\n  // Function to remove a ingredient\r\n  const handleRemoveIngredient = () => {\r\n    const newIngredients = [...ingredients];\r\n    newIngredients.splice(newIngredients.length - 1, 1);\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  // Function to add a new step\r\n  const handleAddStep = () => {\r\n    setSteps([...steps, \"\"]);\r\n  };\r\n\r\n  // Function to remove a step\r\n  const handleRemoveStep = () => {\r\n    const newSteps = [...steps];\r\n    newSteps.splice(newSteps.length - 1, 1);\r\n    setSteps(newSteps);\r\n  };\r\n\r\n  const [formData, setFormData] = useState({\r\n    id: 0,\r\n    title: \"\",\r\n    image: [\"\"],\r\n    video: \"\",\r\n    ingredients: [],\r\n    steps: [],\r\n    prepTime: \"\",\r\n    cookTime: \"\",\r\n    level: \"easy\",\r\n    serving: \"\",\r\n    type: \"breakfast\",\r\n    options: \"nonspicy\",\r\n    author: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"image1\" || name === \"image2\") {\r\n      // Handle image inputs\r\n      const imageIndex = name === \"image1\" ? 0 : 1;\r\n      const newImages = [...formData.image];\r\n      newImages[imageIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        image: newImages,\r\n      });\r\n    } else if (name === \"author\" || name === \"serving\" || name === \"options\") {\r\n      // Handle author, serving, and options inputs\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    } else if (name.startsWith(\"ingredient\")) {\r\n      // Handle ingredients inputs\r\n      const ingredientIndex = parseInt(name.match(/\\d+/)[0]);\r\n      const newIngredients = [...formData.ingredients];\r\n      newIngredients[ingredientIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        ingredients: newIngredients,\r\n      });\r\n    } else if (name.startsWith(\"step\")) {\r\n      // Handle steps inputs\r\n      const stepIndex = parseInt(name.match(/\\d+/)[0]);\r\n      const newSteps = [...formData.steps];\r\n      newSteps[stepIndex] = value;\r\n      setFormData({\r\n        ...formData,\r\n        steps: newSteps,\r\n      });\r\n    } else {\r\n      // Handle other inputs\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate required fields\r\n    const requiredFields = [\r\n      \"title\",\r\n      \"prepTime\",\r\n      \"cookTime\",\r\n      \"level\",\r\n      \"serving\",\r\n      \"type\",\r\n      \"options\",\r\n      \"author\",\r\n    ];\r\n\r\n    const emptyFields = requiredFields.filter(\r\n      (field) => formData[field].trim() === \"\"\r\n    );\r\n\r\n    if (emptyFields.length > 0) {\r\n      alert(`Please fill in all required fields: ${emptyFields.join(\", \")}`);\r\n      return;\r\n    }\r\n    // Validate Prep Time, Cook Time, and Servings\r\n    const prepTimeValue = parseFloat(formData.prepTime);\r\n    const cookTimeValue = parseFloat(formData.cookTime);\r\n    const servingValue = parseFloat(formData.serving);\r\n\r\n    if (isNaN(prepTimeValue) || isNaN(cookTimeValue) || isNaN(servingValue)) {\r\n      alert(\"Prep Time, Cook Time, and Servings must be numbers.\");\r\n      return; // Do not proceed with the submission\r\n    }\r\n\r\n    try {\r\n      const response = await Axios.post(\r\n        \"http://localhost:8000/recipes\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.status === 200) {\r\n        throw new Error(\r\n          `Network response was not ok: ${response.status} - ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      const data = response.data;\r\n      console.log(\"Recipe saved:\", data);\r\n      setIsSuccess(true);\r\n      window.alert(\"Recipe save successfully!\");\r\n      window.location.href = `/recipes/${data.id}`;\r\n    } catch (error) {\r\n      console.error(\"Error saving recipe:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"container\">\r\n          <div className=\"top_name\">\r\n            <h1>Add a Recipe</h1>\r\n            <p>\r\n              Uploading personal recipes is easy! Add yours to your favorites,\r\n              share with friends, family, or the Allrecipes community.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"section_1\">\r\n            <div>\r\n              <div className=\"title\">\r\n                <h2>Recipe Title</h2>\r\n                <div className=\"typetitle\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Give your recipe a title\"\r\n                    value={formData.title}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"photo\">\r\n                <h2>Photo (optional)</h2>\r\n                <div className=\"typephoto1\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"image1\"\r\n                    placeholder=\"Add image url\"\r\n                    value={formData.image[0]} // Update the value to use an array\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"typephoto\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"image2\"\r\n                    placeholder=\"Add image url\"\r\n                    value={formData.image[1]} // Update the value to use an array\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"video\">\r\n                <h2>Video (optional)</h2>\r\n                <div className=\"typevideo\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"video\"\r\n                    placeholder=\"Add video url\"\r\n                    value={formData.video}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section_2\">\r\n            <h2>Ingredients</h2>\r\n            <p>\r\n              Enter one ingredient per line. Include the quantity and any\r\n              special preparation. Use optional headers to organize the\r\n              different parts of the recipe.\r\n            </p>\r\n            <h3>Enter ingredients below</h3>\r\n            {ingredients.map((ingredient, index) => (\r\n              <div key={index} className=\"typeingre\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"e.g. 2 cups flour\"\r\n                  value={formData.ingredients[index]}\r\n                  onChange={(e) => {\r\n                    const newIngredients = [...formData.ingredients];\r\n                    newIngredients[index] = e.target.value;\r\n                    setFormData({\r\n                      ...formData,\r\n                      ingredients: newIngredients,\r\n                    });\r\n                  }}\r\n                />\r\n                <i\r\n                  onClick={handleRemoveIngredient}\r\n                  className=\"fa-solid fa-circle-minus\"\r\n                ></i>\r\n              </div>\r\n            ))}\r\n\r\n            <button type=\"button\" onClick={handleAddIngredient}>\r\n              +Add Ingredient\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"section_3\">\r\n            <h2>Directions</h2>\r\n            <p>\r\n              Explain how to make your recipe, including oven temperatures,\r\n              baking or cooking times, and pan sizes. Organize the different\r\n              parts of the recipe\r\n            </p>\r\n            <h3>Enter directions below</h3>\r\n            {steps.map((step, index) => (\r\n              <div key={index} className=\"typedirec\">\r\n                <p>Step {index + 1}</p>\r\n                <textarea\r\n                  value={formData.steps[index]}\r\n                  onChange={(e) => {\r\n                    const newSteps = [...formData.steps];\r\n                    newSteps[index] = e.target.value;\r\n                    setFormData({\r\n                      ...formData,\r\n                      steps: newSteps,\r\n                    });\r\n                  }}\r\n                  placeholder=\"e.g. Reheat oven at 30 degrees F...\"\r\n                ></textarea>\r\n                <i\r\n                  onClick={handleRemoveStep}\r\n                  className=\"fa-solid fa-circle-minus\"\r\n                ></i>\r\n              </div>\r\n            ))}\r\n            <button type=\"button\" onClick={handleAddStep}>\r\n              +Add Step\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"section_4\">\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <h2>Prep Time</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"prepTime\"\r\n                  placeholder=\"0\"\r\n                  value={formData.prepTime}\r\n                  onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"preptime\">min</label>\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <h2>Cook Time</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"cookTime\"\r\n                  placeholder=\"0\"\r\n                  value={formData.cookTime}\r\n                  onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"cooktime\">min</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"level\">\r\n                  <h2>Level</h2>\r\n                </label>\r\n                <select id=\"level\" name=\"level\">\r\n                  <option value=\"easy\">Easy</option>\r\n                  <option value=\"Medium\">Medium</option>\r\n                  <option value=\"hard\">Hard</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"recipe-type\">\r\n                  <h2>Type</h2>\r\n                </label>\r\n\r\n                <select\r\n                  id=\"recipe-type\"\r\n                  name=\"type\"\r\n                  value={formData.type}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"breakfast\">Breakfast</option>\r\n                  <option value=\"lunch\">Lunch</option>\r\n                  <option value=\"dinner\">Dinner</option>\r\n                  <option value=\"appetizer\">Appetizer</option>\r\n                  <option value=\"salad\">Salad</option>\r\n                  <option value=\"main-course\">Main Course</option>\r\n                  <option value=\"baked-goods\">Baked Goods</option>\r\n                  <option value=\"dessert\">Dessert</option>\r\n                  <option value=\"soup\">Soup</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"selectBox\">\r\n                <h2>Servings</h2>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"serving\"\r\n                  placeholder=\"0\"\r\n                  value={formData.serving}\r\n                  onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"selectBox\">\r\n                <label htmlFor=\"recipe-options\">\r\n                  <h2>Options</h2>\r\n                </label>\r\n                <select\r\n                  id=\"recipe-options\"\r\n                  name=\"opt\"\r\n                  value={formData.options}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"non-spicy\">Non-Spicy</option>\r\n                  <option value=\"spicy\">Spicy</option>\r\n                  <option value=\"vegetarian\">Vegetarian</option>\r\n                  <option value=\"vegan\">Vegan</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section_5\">\r\n            <h2>Author Name</h2>\r\n            <input\r\n              type=\"text\"\r\n              name=\"author\"\r\n              placeholder=\"Your name\"\r\n              value={formData.author}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"section_6\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"cancel-button\" type=\"button\">\r\n                Cancel {/* Use type=\"reset\" to reset the form */}\r\n              </button>\r\n            </Link>\r\n\r\n            <button className=\"save-button\" type=\"submit\">\r\n              Add Recipe\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nAdd.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default styled(Add)`\r\n  .container {\r\n    margin: 0 10%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  .container .top_name {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n    margin: 130px 130px 0 130px;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_1 {\r\n    margin-top: 20px;\r\n    padding: 20px 0;\r\n    border-top: #e23c34 1px solid;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_1 input {\r\n    width: 500px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border: 0;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_1 input::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_1 textarea {\r\n    width: 500px;\r\n    height: 80px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    resize: none;\r\n    background-color: #fff;\r\n  }\r\n  .section_3 textarea::placeholder {\r\n    color: #ababab;\r\n    font-family: \"Inter\", sans-serif;\r\n  }\r\n\r\n  .container .section_1 h2 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .container .section_1 textarea::placeholder {\r\n    color: transparent;\r\n  }\r\n\r\n  .container .section_2,\r\n  .container .section_3,\r\n  .container .section_4,\r\n  .container .section_5 {\r\n    margin-top: 20px;\r\n    padding: 20px 0;\r\n    border-top: #e23c34 1px solid;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    color: #e23c34;\r\n  }\r\n\r\n  .container .section_2 input,\r\n  .container .section_5 input {\r\n    width: 500px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    margin-right: 10px;\r\n    border: 0;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_2 input::placeholder,\r\n  .container .section_5 input::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_2 .typeingre,\r\n  .typedirec {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .container .section_2 .typeingre i,\r\n  .typedirec i {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_2 .typeingre i:hover,\r\n  .typedirec i:hover {\r\n    cursor: pointer;\r\n    color: #6b6b6b;\r\n    transition: all ease 0.5s;\r\n  }\r\n\r\n  .container .section_2 button,\r\n  .container .section_3 button {\r\n    background-color: #e23c34;\r\n    color: #fff;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    width: 15%;\r\n  }\r\n\r\n  .container .section_2 button:hover,\r\n  .container .section_3 button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_2 h2,\r\n  h3 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .container .section_3 textarea {\r\n    width: 500px;\r\n    height: 80px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    resize: none;\r\n    background-color: #fff;\r\n    font-family: \"Inter\", sans-serif;\r\n  }\r\n\r\n  .container .section_3 textarea::placeholder {\r\n    color: #ababab;\r\n  }\r\n\r\n  .container .section_4 {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .container .section_4 .selectBox {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .container .section_4 .selectBox input {\r\n    width: 50px;\r\n    height: 30px;\r\n    margin: 10px;\r\n    border: 0;\r\n    text-align: center;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_4 .selectBox input::placeholder {\r\n    color: #ababab;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_4 .selectBox select {\r\n    width: 150px;\r\n    height: 30px;\r\n    margin: 10px;\r\n    border: 0;\r\n    outline: none;\r\n    border: #fff 2px solid;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .container .section_4 .selectBox select:hover {\r\n    background-color: #fff;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    transition: 0.3s;\r\n  }\r\n\r\n  .container .section_4 .selectBox select option {\r\n    background-color: #ffffff;\r\n    color: #333;\r\n    padding: 5px;\r\n    outline: none;\r\n  }\r\n\r\n  .container .section_4 label {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .container .section_5 h2 {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .section_6 .cancel-button {\r\n    background-color: #fff;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    cursor: pointer;\r\n    width: 150px;\r\n  }\r\n\r\n  .section_6 .cancel-button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n  }\r\n\r\n  .section_6 .save-button {\r\n    background-color: #e23c34;\r\n    color: #fff;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    width: 150px;\r\n  }\r\n\r\n  .section_6 .save-button:hover {\r\n    background-color: #fdee82;\r\n    color: #e23c34;\r\n    border: #e23c34 2px solid;\r\n    border-radius: 100px;\r\n  }\r\n\r\n  .section_6 {\r\n    text-align: right;\r\n  }\r\n`;\r\n","C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\NotFound.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\comments\\Review.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\comments\\Comment.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\GlobalStyle.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\app\\store.js",[],[],["129"],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\EndBanner\\EndBanner.js",[],[],"C:\\Users\\Windows10\\Documents\\GitHub\\RecipesProject\\frontend\\src\\component\\EndBanner\\ViewReq.js",[],[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":198,"column":15,"nodeType":"134","endLine":198,"endColumn":58},{"ruleId":"132","severity":1,"message":"133","line":199,"column":15,"nodeType":"134","endLine":199,"endColumn":54},{"ruleId":"132","severity":1,"message":"133","line":200,"column":15,"nodeType":"134","endLine":200,"endColumn":55},{"ruleId":"132","severity":1,"message":"133","line":201,"column":15,"nodeType":"134","endLine":201,"endColumn":58},{"ruleId":"132","severity":1,"message":"133","line":202,"column":15,"nodeType":"134","endLine":202,"endColumn":54},{"ruleId":"132","severity":1,"message":"133","line":203,"column":15,"nodeType":"134","endLine":203,"endColumn":60},{"ruleId":"132","severity":1,"message":"133","line":204,"column":15,"nodeType":"134","endLine":204,"endColumn":60},{"ruleId":"132","severity":1,"message":"133","line":205,"column":15,"nodeType":"134","endLine":205,"endColumn":56},{"ruleId":"132","severity":1,"message":"133","line":206,"column":15,"nodeType":"134","endLine":206,"endColumn":53},{"ruleId":"135","severity":1,"message":"136","line":22,"column":3,"nodeType":"137","endLine":30,"endColumn":4},{"ruleId":"138","severity":1,"message":"139","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"142","line":1,"column":28,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"143","line":13,"column":10,"nodeType":"140","messageId":"141","endLine":13,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":1,"column":27,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"143","line":10,"column":10,"nodeType":"140","messageId":"141","endLine":10,"endColumn":19},{"ruleId":"130","replacedBy":"144"},"no-new-object",["145"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","The 'plusSlides' function makes the dependencies of useEffect Hook (at line 38) change on every render. To fix this, wrap the definition of 'plusSlides' in its own useCallback() Hook.","FunctionDeclaration","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'isSuccess' is assigned a value but never used.",["145"],"no-object-constructor"]